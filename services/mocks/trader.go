// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/vadimInshakov/marti/entity"
)

// Trader is an autogenerated mock type for the Trader type
type Trader struct {
	mock.Mock
}

// Buy provides a mock function with given fields: pair, amount
func (_m *Trader) Buy(pair entity.Pair, amount *big.Float) error {
	ret := _m.Called(pair, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Pair, *big.Float) error); ok {
		r0 = rf(pair, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Sell provides a mock function with given fields: pair, amount
func (_m *Trader) Sell(pair entity.Pair, amount *big.Float) error {
	ret := _m.Called(pair, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Pair, *big.Float) error); ok {
		r0 = rf(pair, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTrader interface {
	mock.TestingT
	Cleanup(func())
}

// NewTrader creates a new instance of Trader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTrader(t mockConstructorTestingTNewTrader) *Trader {
	mock := &Trader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
