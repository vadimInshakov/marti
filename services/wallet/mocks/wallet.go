// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	mock "github.com/stretchr/testify/mock"

	wallet "github.com/vadimInshakov/marti/services/wallet"
)

// Wallet is an autogenerated mock type for the Wallet type
type Wallet struct {
	mock.Mock
}

// Add provides a mock function with given fields: tx, currency, amount
func (_m *Wallet) Add(tx wallet.Tx, currency string, amount *big.Float) error {
	ret := _m.Called(tx, currency, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(wallet.Tx, string, *big.Float) error); ok {
		r0 = rf(tx, currency, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Balance provides a mock function with given fields: currency
func (_m *Wallet) Balance(currency string) (*big.Float, error) {
	ret := _m.Called(currency)

	var r0 *big.Float
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*big.Float, error)); ok {
		return rf(currency)
	}
	if rf, ok := ret.Get(0).(func(string) *big.Float); ok {
		r0 = rf(currency)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Float)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeginTx provides a mock function with given fields:
func (_m *Wallet) BeginTx() wallet.Tx {
	ret := _m.Called()

	var r0 wallet.Tx
	if rf, ok := ret.Get(0).(func() wallet.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wallet.Tx)
		}
	}

	return r0
}

// Sub provides a mock function with given fields: tx, currency, amount
func (_m *Wallet) Sub(tx wallet.Tx, currency string, amount *big.Float) error {
	ret := _m.Called(tx, currency, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(wallet.Tx, string, *big.Float) error); ok {
		r0 = rf(tx, currency, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewWallet interface {
	mock.TestingT
	Cleanup(func())
}

// NewWallet creates a new instance of Wallet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWallet(t mockConstructorTestingTNewWallet) *Wallet {
	mock := &Wallet{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
